AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  rpg-sheet-api

  Sample SAM Template for rpg-sheet-api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Parameters:
  Stream:
    Type: String

Globals:
  Function:
    Runtime: python3.7
    Handler: index.handler
    Timeout: 90
    Environment:
      Variables:
        character_table_name: CharactersTable

Resources:
  
  CharactersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: CharactersTable
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: RestApi
      EndpointConfiguration: EDGE
      Cors:
        AllowHeaders: "'Content-Type,Accept'"
        AllowOrigin: "'*'"
        AllowMethods: "'GET,POST,DELETE,PUT,OPTIONS'"
      StageName: dev
    
  RpgSheetLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      ContentUri: './layers/rpg'
      LayerName: RpgSheetLayer
      RetentionPolicy: Delete

  GetCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCharacter
      CodeUri: './handlers/get_character'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
                - kinesis:PutRecord
      Events:
        RestApi:
          Type: Api
          Properties:
            Method: GET
            Path: /character
            RestApiId: !Ref RestApi  
        RestApiCharacterId:
          Type: Api
          Properties:
            Method: GET
            Path: /character/{character_id}
            RestApiId: !Ref RestApi
      Layers:
       - !Ref RpgSheetLayer
  
  PutCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutCharacter
      CodeUri: './handlers/put_character'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
      Events:
        RestApi:
          Type: Api
          Properties:
            Method: PUT
            Path: /character/{character_id}
            RestApiId: !Ref RestApi  
      Layers:
       - !Ref RpgSheetLayer

  PostCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostCharacter
      CodeUri: './handlers/post_character'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
      Events:
        RestApi:
          Type: Api
          Properties:
            Method: POST
            Path: /character
            RestApiId: !Ref RestApi  
      Layers:
       - !Ref RpgSheetLayer

  DeleteCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteCharacter
      CodeUri: './handlers/delete_character'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - dynamodb:DeleteItem
      Events:
        RestApi:
          Type: Api
          Properties:
            Method: DELETE
            Path: /character/{character_id}
            RestApiId: !Ref RestApi  
      Layers:
       - !Ref RpgSheetLayer

  DataStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DataStreamFunction
      CodeUri: './streams/data-streams'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - kinesis:*
                - firehose:*
                - lambda:*
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !Ref Stream
            BatchSize: 100
            StartingPosition: LATEST
    
